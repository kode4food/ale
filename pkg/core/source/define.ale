;;;; ale core: definition facilities

(private* is-cons-or-list)
(define* is-cons-or-list
  (lambda (value)
    (or (is-cons value)
        (is-list value))))

(private* parse-define)
(define* parse-define
  (lambda (body)
    (let ([f (car body)]
          [r (cdr body)])
      (if ({:private #t :macro #t} f #f)
          (assoc (parse-define r) f #t)
          (if (is-cons-or-list f)
              {:name (assert-type :local (car f))
               :lambda #t
               :body `(lambda ,(cdr f) ,@r)}
              {:name (assert-type :local f)
               :body (car r)})))))

(define* define
  (macro*
    (lambda body
      ; we're so early days that let* hasn't been defined yet
      (let [parsed (parse-define body)]
        (let ([name (:name parsed)]
              [body (:body parsed)])
          (let [value (if (:macro parsed #f) `(macro* ,body) body)]
            (let [labeled (if (:lambda parsed #f) `(label ,name ,value) value)]
              (if (:private parsed #f)
                  `(begin (private* ,name) (define* ,name ,labeled))
                  `(define* ,name ,labeled)))))))))

(define :macro (define-macro . forms)
  (let [name (car forms)]
    (if (is-local name)
        `(define ,name (label ,name (macro* (lambda ,@(cdr forms)))))
        `(define :macro ,@forms))))

(define-macro (define-lambda . forms)
  (let [name (car forms)]
    (if (is-local name)
        `(define ,name (label ,name (lambda ,@(cdr forms))))
        `(define ,@forms))))

(define-macro (lambda-rec name . forms)
  (if (is-local name)
    `(label ,name (lambda ,@forms))
    `(lambda ,name ,@forms)))

;; case and some macros require it
(define (map! func coll)
  (if (is-empty coll)
    '()
    (cons (func (car coll))
          (map! func (cdr coll)))))

(define-macro declare
  [(name) `(public* ,name)]
  [names `(begin ,@(map! (lambda (n) (list 'ale/public* n)) names))])

(define-macro private
  [(name) `(private* ,name)]
  [names `(begin ,@(map! (lambda (n) (list 'ale/private* n)) names))])
