;;;; ale core: standard sequences

(define (seq value)
  (if (and (seq? value) (!empty? value))
      value
      false))

(define (seq! value)
  (if (seq? value)
      (if (!empty? value) value false)
      (raise "value can't act as a sequence: " (str! value))))

(define (seq->object . colls)
  (apply object (apply concat! colls)))

(define (seq->list . colls)
  (apply list (apply concat! colls)))

(define (seq->vector . colls)
  (apply vector (apply concat! colls)))

(define (append* coll . values)
  ((lambda-rec append-inner (coll values)
     (if (seq values)
         (append-inner (append coll (first values)) (rest values))
         coll))
   coll values))

(define (cons* coll . values)
  ((lambda-rec cons-inner (coll values)
     (if (seq values)
         (cons-inner (cons (first values) coll) (rest values))
         coll))
   coll values))

(define (conj coll . values)
  (if (appendable? coll)
      (apply append* (cons coll values))
      (apply cons* (cons coll values))))

(define (length! coll)
  ((lambda-rec length-inner (coll prev)
     (if (counted? coll)
         (+ prev (length coll))
       (if (seq coll)
           (length-inner (rest coll) (inc prev))
           prev)))
   coll 0))

(define nth!
  (let-rec
    [scan
     (lambda (coll pos missing)
       (if (seq coll)
           (if (> pos 0)
               (scan (rest coll) (dec pos) missing)
               (first coll))
           (missing)))]
    (lambda-rec nth!
      [(coll pos)
         (if (indexed? coll)
             (nth coll pos)
             (scan coll pos (thunk (raise "index out of bounds"))))]
      [(coll pos default)
         (if (indexed? coll)
             (nth coll pos default)
             (scan coll pos (thunk default)))])))

(define (last coll)
  (let [s (length coll)]
    (when (> s 0)
          (nth coll (dec (length coll))))))

(define (last! coll)
  ((lambda-rec last-inner (coll prev)
     (if (and (counted? coll)
              (indexed? coll))
         (let [s (length coll)]
           (if (> s 0)
               (nth coll (dec (length coll)))
               prev))
         (if (seq coll)
             (let ([f (first coll)]
                   [r (rest coll)])
               (last-inner r f))
             prev)))
   coll null))

(define-lambda fold-left
  [(func init coll)
     ((lambda-rec fold-inner (acc coll)
        (if (seq coll)
            (fold-inner (func acc (first coll)) (rest coll))
            acc))
      init coll)]
  [(func coll)
     (if (seq coll)
         (fold-left func (first coll) (rest coll))
         (func))])

(define (reverse! coll)
  (if (reversible? coll)
      (reverse coll)
      (fold-left conj null coll)))

(define :private (swap-args func)
  (lambda (l r) (func r l)))

(define :private (make-fold-right reverser)
  (lambda
    [(func init coll)
       (fold-left (swap-args func) init (reverser coll))]
    [(func coll)
       (fold-left (swap-args func) (reverser coll))]))

(define fold-right (make-fold-right reverse))
(define fold-right! (make-fold-right reverse!))

(define foldl fold-left)
(define foldr fold-right)
(define reduce fold-left)
