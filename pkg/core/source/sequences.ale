;;;; ale core: standard sequences

(define-macro :private (make-fetch-err inst coll elem err-msg)
  (apply list (concat!
    '(ale/asm*
         resolve) [coll] '(
         resolve) [elem]
         [inst] '(
         cond-jump :found
         const) [err-msg] '(
         panic
    :found))))

(define-macro :private (make-fetch-def inst coll elem def-val)
  (apply list (concat!
    '(ale/asm*
         resolve) [coll] '(
         resolve) [elem]
         [inst] '(
         cond-jump :found
         resolve) [def-val] '(
         return
     :found))))

(define-lambda get
  [(coll key)         (make-fetch-err get coll key "key not found")]
  [(coll key default) (make-fetch-def get coll key default)])

(define-lambda nth
  [(coll idx)         (make-fetch-err nth coll idx "index out of bounds")]
  [(coll idx default) (make-fetch-def nth coll idx default)])

(define (contains? coll key)
  (if (mapped? coll)
      (asm*
          resolve coll
          resolve key
          get
          swap
          pop)
      false))

(define (seq value)
  (if (and (seq? value) (!empty? value))
      value
      false))

(define (seq! value)
  (if (seq? value)
      (if (!empty? value) value false)
      (raise "value can't act as a sequence: " (str! value))))

(define (seq->object . colls)
  (apply object (apply concat! colls)))

(define (seq->list . colls)
  (apply list (apply concat! colls)))

(define (seq->vector . colls)
  (apply vector (apply concat! colls)))

(define (conj coll value)
  (if (appendable? coll)
      (append coll value)
      (cons value coll)))

(define :private (swap-args func)
  (lambda (l r) (func r l)))

(define-lambda fold-left
  [(func init coll)
    ((lambda-rec fold-inner (acc coll)
       (if (seq coll)
           (fold-inner (func acc (first coll)) (rest coll))
           acc))
      init coll)]
  [(func coll)
    (if (seq coll)
        (fold-left func (first coll) (rest coll))
        (func))])

(define (assoc* coll . pairs)   (fold-left assoc coll pairs))
(define (dissoc* coll . keys)   (fold-left dissoc coll keys))
(define (append* coll . values) (fold-left append coll values))
(define (cons* coll . values)   (fold-left (swap-args cons) coll values))
(define (conj* coll . values)   (fold-left conj coll values))

(define (length! coll)
  ((lambda-rec length-inner (coll prev)
     (if (counted? coll)
         (+ prev (length coll))
         (if (seq coll)
             (length-inner (rest coll) (inc prev))
             prev)))
   coll 0))

(define nth!
  (let-rec
    [scan
     (lambda (coll pos missing)
       (if (seq coll)
           (if (> pos 0)
               (scan (rest coll) (dec pos) missing)
               (first coll))
           (missing)))]
    (lambda-rec nth!
      [(coll pos)
         (if (indexed? coll)
             (nth coll pos)
             (scan coll pos (thunk (raise "index out of bounds"))))]
      [(coll pos default)
         (if (indexed? coll)
             (nth coll pos default)
             (scan coll pos (thunk default)))])))

(define (last coll)
  (let [s (length coll)]
    (when (> s 0)
          (nth coll (dec (length coll))))))

(define (last! coll)
  ((lambda-rec last-inner (coll prev)
     (if (and (counted? coll)
              (indexed? coll))
         (let [s (length coll)]
           (if (> s 0)
               (nth coll (dec (length coll)))
               prev))
         (if (seq coll)
             (let ([f (first coll)]
                   [r (rest coll)])
               (last-inner r f))
             prev)))
   coll null))

(define (reverse coll)
  (asm*
      resolve coll
      reverse))

(define (reverse! coll)
  (if (reversible? coll)
      (reverse coll)
      (fold-left conj null coll)))

(define :private (make-fold-right reverser)
  (lambda
    [(func init coll)
       (fold-left (swap-args func) init (reverser coll))]
    [(func coll)
       (fold-left (swap-args func) (reverser coll))]))

(define fold-right (make-fold-right reverse))
(define fold-right! (make-fold-right reverse!))

(define foldl fold-left)
(define foldr fold-right)
(define reduce fold-left)

(define-macro (: target method . args)
  `((get ,target ,method) ,@args))
