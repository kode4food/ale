;;;; ale core: i/o

(declare *in* *out* *err*)

(define *space*   "\s")
(define *newline* "\n")

(define :private (pr-map-with-null func seq)
  (map (lambda (value) (if (null? value) value (func value)))
       seq))

(define (pr . forms)
  (let [mapped (pr-map-with-null str! forms)]
    (when (seq mapped)
          (: *out* :write (first mapped)))
    (when (seq mapped)
          (for-each [elem (rest mapped)]
                    (: *out* :write *space* elem)))))

(define (prn . forms)
  (apply pr forms)
  (: *out* :write *newline*))

(define (print . forms)
  (let [mapped (pr-map-with-null str forms)]
    (when (seq mapped)
          (: *out* :write (first mapped)))
    (when (seq mapped)
          (for-each [elem (rest mapped)]
                    (: *out* :write *space* elem)))))

(define (println . forms)
  (apply print forms)
  (: *out* :write *newline*))

(define :private (with-open-close value)
  (let [c (:close value)]
    (if (procedure? c) c no-op)))

(define-macro (with-open bindings . body)
  (assert-args
    [(vector-pair? bindings) (str "invalid with-open bindings: " bindings)])
  (cond
    [(= (length bindings) 0)
     `(begin ,@body)]

    [(>= (length bindings) 2)
     `(let ([,(0 bindings) ,(1 bindings)]
            [close#        (with-open-close ,(0 bindings))])
        (try
          (with-open [,@(rest (rest bindings))] ,@body)
          (finally (close#))))]))
