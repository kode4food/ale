;;;; ale core: predicates

(define :private (is-true value) (eq true value))
(define :private (is-false value) (eq false value))

(define :private (pred-apply func args)
  (if (is-empty args)
      true
      (unless (func (first args))
              false
              (pred-apply func (rest args)))))

(define :private (define-pos func name)
  (let [func-name (sym (str name "?"))]
    `(define ,func-name (lambda (f# . r#)
       (,pred-apply ,func (cons f# r#))))))

(define :private (define-neg func name)
  (let [func-name (sym (str "!" name "?"))]
    `(define ,func-name (lambda (f# . r#)
       (,pred-apply (lambda (value) (not (,func value)))
                    (cons f# r#))))))

(define :private :macro (define-predicate func name)
  `(begin ,(define-pos func name)
          ,(define-neg func name)))

(define-predicate is-any "any")
(define-predicate is-appendable "appendable")
(define-predicate is-atom "atom")
(define-predicate is-boolean "boolean")
(define-predicate is-cons "cons")
(define-predicate is-counted "counted")
(define-predicate is-empty "empty")
(define-predicate is-even "even")
(define-predicate is-false "false")
(define-predicate is-indexed "indexed")
(define-predicate is-keyword "keyword")
(define-predicate is-list "list")
(define-predicate is-local "local")
(define-predicate is-macro "macro")
(define-predicate is-mapped "mapped")
(define-predicate is-nan "nan")
(define-predicate is-neg-inf "-inf")
(define-predicate is-null "null")
(define-predicate is-number "number")
(define-predicate is-object "object")
(define-predicate is-odd "odd")
(define-predicate is-pair "pair")
(define-predicate is-pos-inf "inf")
(define-predicate is-procedure "procedure")
(define-predicate is-promise "promise")
(define-predicate is-qualified "qualified")
(define-predicate is-resolved "resolved")
(define-predicate is-reversible "reversible")
(define-predicate is-seq "seq")
(define-predicate is-special "special")
(define-predicate is-string "string")
(define-predicate is-symbol "symbol")
(define-predicate is-true "true")
(define-predicate is-vector "vector")
(define-predicate is-zero "zero")

(define promise-forced? resolved?)
(define !promise-forced? !resolved?)
