;;;; ale core: assembler bootstrapping

(def-special asm*)
(def-special special*)

(asm*
    eval (special* (name)
        const name
        dup
        env-public)
    const public*
    env-bind

    eval (special* (name)
        const name
        dup
        env-private)
    const private*
    env-bind

    eval (special* (name value)
        eval value
        dup
        const name
        env-bind)
    const define*
    env-bind
    ; block evaluator will pop this
    null)

(define* quote
  (special* (form)
      const form))

(define* cons
  (lambda (car cdr)
    (asm*
        resolve cdr
        resolve car
        cons)))

(define* car
  (lambda (cons)
    (asm*
        resolve cons
        car)))

(define* cdr
  (lambda (cons)
    (asm*
        resolve cons
        cdr)))

(define* append
  (lambda (seq val)
    (asm*
        resolve seq
        resolve val
        append)))

(define* assoc
  (lambda (seq pair)
    (asm*
        resolve seq
        resolve pair
        assoc)))

(define* dissoc
  (lambda (seq key)
    (asm*
        resolve seq
        resolve key
        dissoc)))

(define* get
  (lambda
    [(seq key)
       (asm*
           resolve seq
           resolve key
           get
           cond-jump :success
           const "key not found in mapped"
           panic
        :success)]
    [(seq key default)
       (asm*
           resolve seq
           resolve key
           get
           cond-jump :success
           resolve default
           return
        :success)]))

(define* raise
  (lambda strs
    (asm*
        resolve strs
        resolve ale/str
        call-with
        panic
        null)))

(define* begin
  (special* body
      null
      for-each [val body]
          pop
          eval val
      end))
