;;;; ale core: binding

(define :private (vector-pair? clause)
  (and (is-vector clause)
       (= 2 (length clause))))

(define :private (binding-clause? clause)
  (and (vector-pair? clause)
       (is-local (0 clause))))

(private assert-args)
(define-macro assert-args
  [() null]
  [(clause) (raise "assert-args clauses must be paired")]
  [clauses  `(if ,(0 clauses)
                 (assert-args ,@(rest (rest clauses)))
                 (raise ,(1 clauses)))])

(define :private (make-bindings value)
  (let-rec
    [is-bindings
     (lambda (value)
       (or (binding-clause? value)
           (and (is-list value)
                (or (is-empty value)
                    (and (binding-clause? (first value))
                         (is-bindings (rest value)))))))]
    (assert-args
      (is-bindings value) (str "invalid binding: " value))
    (if (is-vector value)
        (list value)
        value)))

(define-macro (let* bindings . body)
  (let [b (make-bindings bindings)]
    (let ([binding (first b)]
          [next    (rest b)])
      (let ([name  (0 binding)]
            [value (1 binding)])
        (if (is-empty next)
            `(let [,name ,value] ,@body)
            `(let [,name ,value]
               (let* ,next ,@body)))))))
