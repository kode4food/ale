;;;; ale core: numerics

(private* make-reducer)
(define* make-reducer (macro* (lambda (args init inst)
  (apply list (concat!
    '(ale/asm*
        .private accum :val
        .eval) [init] '(
        store accum
        .private rest :val
        .resolve) [args] '(
        store rest
    :loop
        load rest
        empty
        cond-jump :end
        load accum
        load rest
        car)
        [inst] '(
        store accum
        load rest
        cdr
        store rest
        jump :loop
    :end
        load accum))))))

(define (+ . args) (make-reducer args 0 add))
(define (* . args) (make-reducer args 1 mul))

(define (mod num den . more)
  (make-reducer more
               (asm*
                   .resolve num
                   .resolve den
                   mod)
               mod))

(define-lambda /
  [(x) (asm* .const 1 .resolve x div)]
  [(f . r) (make-reducer r f div)])

(define-lambda -
  [(x) (asm* zero .resolve x sub)]
  [(f . r) (make-reducer r f sub)])

(define modulo mod)

(define (= f . r) (make-comparator f r num-eq))
(define (< f . r) (make-comparator f r num-lt))
(define (<= f . r) (make-comparator f r num-lte))
(define (> f . r) (make-comparator f r num-gt))
(define (>= f . r) (make-comparator f r num-gte))

(define (!= f . r)
  (asm* .eval (make-comparator f r num-eq) not))

(define :private (is-zero value) (= value 0))
(define :private (is-even value) (= (mod value 2) 0))
(define :private (is-odd value) (= (mod value 2) 1))

(define (inc value) (+ value 1))
(define (dec value) (- value 1))

(define *pos-inf* (/ 1.0 0.0))
(define *neg-inf* (/ -1.0 0.0))

(define :private (is-pos-inf value) (= value *pos-inf*))
(define :private (is-neg-inf value) (= value *neg-inf*))

(define +inf *pos-inf*)
(define -inf *neg-inf*)
(define nan (- +inf +inf))
