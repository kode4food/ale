;;;; ale core: basics

(define* if
  (special*
    [(predicate consequent alternative)
          .eval predicate
          cond-jump :consequent
          .eval alternative
          jump :end
      :consequent
          .eval consequent
      :end]
    [(predicate consequent)
          .eval predicate
          cond-jump :consequent
          null
          jump :end
      :consequent
          .eval consequent
      :end]))

(define* assert-type
  (lambda (type value)
    (let [pred (is-a* type)]
      (if (pred value)
          value
          (raise "got " (:name (type-of* value))
                 ", expected " (cdr (str type))
                 ": " (str! value))))))

(private* is-empty)
(define* is-empty
  (lambda (seq)
    (asm*
        .resolve seq
        empty)))

(define* apply
  (lambda (func . args)
    (let-rec
      [flatten-args
        (lambda (args)
          (if (is-empty (cdr args))
              (assert-type :sequence (car args))
              (cons (car args) (flatten-args (cdr args)))))]
      (let [flat-args (flatten-args args)]
        (asm*
            .resolve flat-args
            .resolve func
            call-with)))))

;; syntax-quoting requires it
(define* concat!
  (lambda colls
    (let-rec
      [concat-inner
       (lambda (colls head)
         (if (is-empty colls)
             (apply list head)
             (let ([f (car colls)]
                   [r (cdr colls)])
               (if (is-empty f)
                   (concat-inner r head)
                   (concat-inner (cons (cdr f) r)
                                 (append head (car f)))))))]
      (concat-inner colls []))))

(define* label
  (macro*
    (lambda (name form)
      `(let-rec [,name ,form] ,name))))

(define* and
  (macro*
    (lambda
      [() #t]
      [(clause) clause]
      [clauses
         `(let [and# ,(car clauses)]
            (if and#
                (and ,@(cdr clauses))
                and#))])))

(define* or
  (macro*
    (lambda
      [() #f]
      [(clause) clause]
      [clauses
         `(let [or# ,(car clauses)]
            (if or#
                or#
                (or ,@(cdr clauses))))])))

(private* make-predicate)
(define* make-predicate (macro* (lambda (name type)
  `(begin
     (private* ,name)
     (define* ,name (is-a* ,type))))))

;; type-based predicates
(make-predicate is-any       :any)
(make-predicate is-boolean   :boolean)
(make-predicate is-cons      :cons)
(make-predicate is-keyword   :keyword)
(make-predicate is-macro     :macro)
(make-predicate is-null      :null)
(make-predicate is-number    :number)
(make-predicate is-object    :object)
(make-predicate is-procedure :procedure)
(make-predicate is-special   :special)
(make-predicate is-string    :string)
(make-predicate is-symbol    :symbol)
(make-predicate is-vector    :vector)

;; derived predicates
(make-predicate is-atom       :atom)
(make-predicate is-appendable :appender)
(make-predicate is-counted    :counted)
(make-predicate is-indexed    :indexed)
(make-predicate is-list       :list)
(make-predicate is-local      :local)
(make-predicate is-mapped     :mapped)
(make-predicate is-nan        :nan)
(make-predicate is-pair       :pair)
(make-predicate is-promise    :promise)
(make-predicate is-qualified  :qualified)
(make-predicate is-resolved   :resolved)
(make-predicate is-reversible :reverser)
(make-predicate is-seq        :sequence)
